
var express = require('express');
var app = express();
var database = require('./strict/database');
var pool = database.mysql_pool;
var dbname = database.dbname;
var bodyParser = require('body-parser');
var fs = require('fs');
var session = require('express-session');
var formidable = require('formidable');
var aes = require('aes-cross');
var key = new Buffer('godfatherpartiii', 'binary');
var numeral = require('numeral');
var favicon = require('serve-favicon')
var path = require('path')

var cors = require('cors');
var morgan = require('morgan')
const { createLogger, format, transports } = require('winston');
const { combine, timestamp, label, prettyPrint } = format;

var rn = require('random-number');
var genRandom = rn.generator({
    min: 0, max: 1000000, integer: true
})

console.log('sjc@gmail.com' + '-' + genRandom())

const logger = createLogger({
    format: combine(
        label({ label: 'CBWPv2' }),
        timestamp(),
        prettyPrint()
    ),
    transports: [
        //new transports.Console(),
        new transports.File({ filename: __dirname + '/logs/error.log', level: 'error' }),
        new transports.File({ filename: __dirname + '/logs/combined.log' }),
        new transports.File({ filename: __dirname + '/logs/info.log', level: 'info' })
    ]
})
if (process.env.NODE_ENV !== 'production') { //show logs on the console - only for DEV
    logger.add(new transports.Console({
        format: format.simple()
    }));
}

/*
--- New Features ---
1. Figure out proper dev-production pipleline with folders, html assets, and everything. [File Structure]
2. bycrypt encryption
10. Warning: connect.session() MemoryStore is notdesigned for a production environment, as it will leakmemory, and will not scale past a single process.
12. session storage - unique encrypted autogenerated user_id - try with mysql
13. auto generate emailreset URLs with use_id parameters - (ENcrypt the emailaddres+randomid) - DONE
14. Login Part Seperate - file
 
To ensure you handle all exceptions, use the following techniques:
 
    Use try-catch
    Use promises
Ensure, app will start automatically after crash
 
Set NODE_ENV to “production”
Ensure your app automatically restarts
    Run your app in a cluster
    Cache request results
    Use a load balancer
 
 
TO AUTO RESTART - use Process Managers
The most popular process managers for Node are as follows:
 
    StrongLoop Process Manager
    PM2
    Forever
 
 
https://expressjs.com/en/advanced/best-practice-performance.html
*/
app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')))
app.use(bodyParser.json()); // support json encoded bodies
app.use(bodyParser.urlencoded({ extended: true })); // support encoded bodies
app.use(express.static(path.join(__dirname, 'html')));
app.use(express.static(path.join(__dirname, 'public')));
app.use(morgan('[WEB] :method ":url" (:status) @ :response-time ms <CEYMOSS-WP-v2>'))
app.use(cors());

console.log('NODE_ENV:', process.env.NODE_ENV) // change to production for Heroku

/*
app.use(function (req, res, next) {
 
    // Website you wish to allow to connect
    res.setHeader('Access-Control-Allow-Origin', '*');
 
    // Request methods you wish to allow
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');
 
    // Request headers you wish to allow
    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');
 
    // Set to true if you need the website to include cookies in the requests sent
    // to the API (e.g. in case you use sessions)
    res.setHeader('Access-Control-Allow-Credentials', true);
 
    // Pass to next layer of middleware
    next();
});*/

app.disable('x-powered-by');
app.use(session({
    secret: process.env.SESSION_SECRET,
    resave: true,
    saveUninitialized: true,
    rolling: true,
    cookie: { maxAge: 15 * 60 * 1000 }
}));

var auth = function (req, res, next) {
    if (req.session && req.session.user && req.session.admin)//=== "admin"
        return next();
    else {
        //return res.sendStatus(401);
        res.redirect('/');
    }
};

function errorLog(data) {
    var d = new Date();
    var HEAD = '\n-----' + d + '-----\n';
    var DOWN = '\n---------------------------------------------------------------------\n';
    fs.appendFile('ERRORLOG.txt', HEAD + data + DOWN, function (err) {
        if (err) throw err;
        console.log('Error Log Updated!');
    });
}

///////////////// Debug
var var1 = __filename;
var1 = var1.split('\\');
var NAMEV = '=========[ ' + var1[var1.length - 2] + ' -- ' + var1[var1.length - 1] + ' ]===========';
console.log(NAMEV);

///////////////// Configurations
var PC_INDEX = __dirname.indexOf('Sameera');
const port = process.env.PORT || 80;//80;
var timezone = '';

if (PC_INDEX > -1) {
    // console.log('Sameera PC');
    timezone = '0:00:00.00';
}
else {
    // console.log('Heroku PC');
    // port = process.env.PORT || 8080;
    timezone = '5:30:00.00';
}

const SERVER_ERR = 500
const CLIENT_ERR = 400

function getMyDate() {
    var currentTime = new Date();
    var hours = currentTime.getFullYear();
    var minutes = currentTime.getUTCMonth();
    var seconds = currentTime.getDate();
    minutes += 1;

    if (minutes < 10) {
        minutes = "0" + minutes;
    }
    if (seconds < 10) {
        seconds = "0" + seconds;
    }
    var str = "" + hours + "-" + minutes + "-" + seconds + "";
    return str;
}
function getMyTM() {
    var currentTime = new Date();
    var hours = currentTime.getHours();
    var minutes = currentTime.getMinutes();
    var seconds = currentTime.getSeconds();
    minutes += 1;

    if (minutes < 10) {
        minutes = "0" + minutes;
    }
    if (seconds < 10) {
        seconds = "0" + seconds;
    }
    var str = "" + hours + ":" + minutes + ":" + seconds + "";
    return str;
}
/// routes handle
app.get('/', function (req, res) {
    // console.log('===== MAIN PAGE =====');
    //res.redirect('/login');
    // Login

    //test
    // req.session.user = "admin";
    // req.session.admin = true;
    // req.session.username = 'basameera';

    if (req.session && req.session.user === "admin" && req.session.admin) {
        res.redirect('/index');
    }
    else {
        res.redirect('/login');
    }
});

app.get('/login', function (req, res) {
    res.sendFile(__dirname + '/public/login.html');
});

app.post('/login', function (req, res) {
    var form = new formidable.IncomingForm();
    form.parse(req, function (err, fields, files) {
        if (!err) {
            // console.log(fields);

            if (fields.username != '' && fields.password != '') {
                // if (fields.username == 'sam' && fields.password == 'san') {

                pool.getConnection(function (err, connection) {
                    if (err) {
                        errData = {
                            error: 1,
                            data: 'Internal Server Error'
                        }
                        res.status(SERVER_ERR).json(errData);
                    }
                    connection.query("SELECT id FROM `" + dbname + "`.portal_user WHERE db_username=? AND db_password=?;",
                        [fields.username, aes.encText(fields.password, key)],
                        function (err, result) {
                            connection.release();
                            if (!err) {
                                if (result.length > 0) {
                                    req.session.user = "admin";
                                    req.session.admin = true;
                                    req.session.username = fields.username;
                                    res.redirect('/index');
                                }
                                else res.redirect('/');

                            } else {
                                res.redirect('/');
                            }
                        });
                });

                // } else res.redirect('/');
            } else res.redirect('/');
        } else {
            res.redirect('/');
        }
    });
});

app.get('/logout', function (req, res) {
    req.session.destroy();
    res.redirect('/');
});

/////////////////  Pages  ////////////////////////
app.get('/index', auth, function (req, res) {
    res.sendFile(__dirname + '/html/dashboard.html');
});

app.get('/manage', auth, function (req, res) {
    res.sendFile(__dirname + '/html/tables.html');
});

app.get('/sales', auth, function (req, res) {
    res.sendFile(__dirname + '/html/notifications.html');
});

app.get('/admin', auth, function (req, res) {
    res.sendFile(__dirname + '/html/typography.html');
});

app.get('/billreview', auth, function (req, res) {
    res.sendFile(__dirname + '/html/billreview.html');
});
//////////////////////   API   /////////////////////////////////////////
app.post('/api', function (req, res) {
    console.log('===== API =====');
    console.log(req.body);
    //res.end("shit");
    var MODE = req.body.MD;
    if (MODE == 'GB') { //get branch name
        pool.getConnection(function (err, connection) {
            connection.query("SELECT branch_name FROM `" + dbname + "`.`branch` where branch_id=?;",
                [req.body.val],
                function (err, result) {
                    connection.release();
                    if (!err) {
                        console.log(result);
                        var NM = '0';
                        if (result.length > 0) {
                            NM = result[0].branch_name
                        }
                        res.end("GB#" + NM);
                    } else {
                        res.end("GB#0");
                        console.error(err);
                        // throw err;
                    }
                });
        });
    }
    else if (MODE == 'GU') { // Get User
        pool.getConnection(function (err, connection) {
            connection.query("SELECT username FROM `" + dbname + "`.`user` where user_id=?;",
                [req.body.uid],
                function (err, result) {
                    connection.release();
                    if (!err) {
                        console.log(result);
                        var NM = '0';
                        if (result.length > 0) {
                            NM = result[0].username
                        }
                        res.end("GU#" + NM);
                    } else {
                        res.end("GU#0");
                        console.error(err);
                        //throw err;
                    }
                });
        });
    }
    else if (MODE == 'BU') { // Branch User Machine entry
        pool.getConnection(function (err, connection) {
            connection.query("INSERT INTO `" + dbname + "`.`bum_entry` (`branch_id`, `user_id`, `m_num`, `ts`) VALUES (?, ?, ?, ADDTIME(NOW(),?));",
                [req.body.bid, req.body.uid, req.body.mn, timezone],
                function (err, result) {
                    connection.release();
                    if (!err) {
                        console.log(result);
                        res.end("BU#1");
                    } else {
                        res.end("BU#0");
                        console.error(err);
                        //throw err;
                    }
                });
        });
    }
    else if (MODE == 'PE') { // Product entry
        pool.getConnection(function (err, connection) {
            connection.query("INSERT INTO `" + dbname + "`.`product_entry` (`product_id`, `weight`, `unit`, `machine_id`, `bill_id`, `branch_id`, `user_id`) VALUES (?, ?, ?, ?, ?, ?, ?);",
                [req.body.pid, req.body.w, 'Kg', req.body.mn, req.body.bill, req.body.bid, req.body.uid],
                function (err, result) {
                    connection.release();
                    if (!err) {
                        console.log(result);
                        res.end("PE#1");
                    } else {
                        res.end("PE#0");
                        console.error(err);
                        //throw err;
                    }
                });
        });
    }
    else if (MODE == 'BL') { // get branch Bill
        pool.getConnection(function (err, connection) {
            connection.query("SELECT bill_id FROM `" + dbname + "`.bill_mng where branch_id=?;",
                [req.body.bid],
                function (err, result) {
                    connection.release();

                    if (!err) {
                        console.log("len : ", result.length);

                        if (result.length == 0) {//create new entry w/ bill=1
                            console.log('===> creating new branch entry with bill=1');
                            pool.getConnection(function (err, connection) {
                                connection.query("INSERT INTO `" + dbname + "`.`bill_mng` (`branch_id`, `bill_id`, `m_num`, `ts`) VALUES (?, ?, ?, ADDTIME(NOW(),?));",
                                    [req.body.bid, '1', req.body.mn, timezone],
                                    function (err, result) {
                                        connection.release();
                                        console.log(result)
                                        if (!err) {
                                            res.end("BL#1");
                                        } else {
                                            res.end("BL#0");
                                            console.error(err);
                                            // throw err;
                                        }
                                    });
                            });
                        } else {

                            pool.getConnection(function (err, connection) {
                                connection.query("SELECT bill_id FROM `" + dbname + "`.bill_mng where branch_id=? and m_num=? and status=0;",
                                    [req.body.bid, req.body.mn],
                                    function (err, result) {
                                        connection.release();
                                        console.log(result)
                                        if (!err) {
                                            if (result.length > 0) {
                                                console.log('===> reply the bill w/ status=0');
                                                var bill = result[0].bill_id;
                                                res.end("BL#" + bill);
                                            } else {
                                                console.log('===> get the incremented next bill value');
                                                pool.getConnection(function (err, connection) {
                                                    connection.query("SELECT MAX(bill_id) as bill_id FROM `" + dbname + "`.bill_mng where branch_id=?;",
                                                        [req.body.bid],
                                                        function (err, result) {
                                                            connection.release();
                                                            console.log(result)
                                                            if (!err) {
                                                                if (result.length > 0) {
                                                                    var bill = parseInt(result[0].bill_id) + 1;   //next bill id

                                                                    //add new entry of new bill id
                                                                    pool.getConnection(function (err, connection) {
                                                                        connection.query("INSERT INTO `" + dbname + "`.`bill_mng` (`branch_id`, `bill_id`, `m_num`, `ts`) VALUES (?, ?, ?, ADDTIME(NOW(),?));",
                                                                            [req.body.bid, bill, req.body.mn, timezone],
                                                                            function (err, result) {
                                                                                connection.release();
                                                                                console.log(result)
                                                                                if (!err) {
                                                                                    res.end("BL#" + bill);
                                                                                } else {
                                                                                    res.end("BL#0");
                                                                                    console.error(err);
                                                                                    // throw err;
                                                                                }
                                                                            });
                                                                    });

                                                                } else {
                                                                    console.log('===> dfgeryvcnfghgfhfh');
                                                                    res.end("BL#0");
                                                                }

                                                            } else {
                                                                res.end("BL#0");
                                                                console.error(err);
                                                                // throw err;
                                                            }
                                                        });
                                                });
                                            }

                                        } else {
                                            res.end("BL#0");
                                            console.error(err);
                                            // throw err;
                                        }
                                    });
                            });
                        }

                    } else {
                        res.end("BL#0");
                        console.error(err);
                        // throw err;
                    }
                });
        });
    }
    else if (MODE == 'BE') { // UPDATE bill number
        pool.getConnection(function (err, connection) {
            connection.query("SELECT id FROM `" + dbname + "`.bill_mng where branch_id=? and m_num=? and bill_id=? and status=0;",
                [req.body.bid, req.body.mn, req.body.bl],
                function (err, result) {
                    connection.release();
                    if (!err) {
                        console.log(result);
                        if (result.length > 0) {
                            var ID = parseInt(result[0].id);
                            pool.getConnection(function (err, connection) {
                                connection.query("UPDATE `" + dbname + "`.`bill_mng` SET `status`='1',`ts`=ADDTIME(NOW(),?) WHERE `id`=?;",
                                    [timezone, ID],
                                    function (err, result) {
                                        connection.release();
                                        if (!err) {
                                            console.log(result);

                                            //reply the next bill number
                                            pool.getConnection(function (err, connection) {
                                                connection.query("SELECT MAX(bill_id) as bill_id FROM `" + dbname + "`.bill_mng where branch_id=?;",
                                                    [req.body.bid],
                                                    function (err, result) {
                                                        connection.release();
                                                        console.log(result)
                                                        if (!err) {
                                                            if (result.length > 0) {
                                                                var bill = parseInt(result[0].bill_id) + 1;   //next bill id

                                                                //add new entry of new bill id
                                                                pool.getConnection(function (err, connection) {
                                                                    connection.query("INSERT INTO `" + dbname + "`.`bill_mng` (`branch_id`, `bill_id`, `m_num`, `ts`) VALUES (?, ?, ?, ADDTIME(NOW(),?));",
                                                                        [req.body.bid, bill, req.body.mn, timezone],
                                                                        function (err, result) {
                                                                            connection.release();
                                                                            console.log(result)
                                                                            if (!err) {
                                                                                res.end("BE#" + bill);
                                                                            } else {
                                                                                res.end("BE#0");
                                                                                console.error(err);
                                                                                // throw err;
                                                                            }
                                                                        });
                                                                });

                                                            } else {
                                                                console.log('===> dfgeryvcnfghgfhfh');
                                                                res.end("BE#0");
                                                            }

                                                        } else {
                                                            res.end("BE#0");
                                                            console.error(err);
                                                            // throw err;
                                                        }
                                                    });
                                            });
                                        } else {
                                            res.end("BE#0");
                                            console.error(err);
                                            //throw err;
                                        }
                                    });
                            });
                        } else {
                            res.end("BE#0");
                        }
                    } else {
                        res.end("BE#0");
                        console.error(err);
                        //throw err;
                    }
                });
        });
    }
    else if (MODE == 'ABC') { // get Product list
        pool.getConnection(function (err, connection) {
            connection.query("SELECT * FROM `" + dbname + "`.products order by product_id;",
                function (err, result) {
                    connection.release();
                    if (!err) {
                        //console.log(result);
                        var newArr = '';
                        if (result.length > 0) {
                            for (var x = 0; x < result.length; x++) {
                                var newitem = '%' + result[x].product_name + '^' + result[x].unit_price + '`\r';
                                // var newitem = '!' + result[x].product_id + '%' + result[x].product_name + '^' + result[x].unit_price + '`\r';
                                newArr += newitem;
                            }
                        }

                        newArr += '~';

                        var newSTR = "PL#" + newArr;
                        console.log("newSTR len : " + newSTR.length);

                        res.end(newSTR);
                    } else {
                        res.end("PL#0");
                        console.error(err);
                        //throw err;
                    }
                });
        });
    }
    else if (MODE == 'BO') { // LOG OUT - Branch User Machine
        pool.getConnection(function (err, connection) {//get id
            connection.query("SELECT MAX(id) as id FROM `" + dbname + "`.bum_entry WHERE branch_id=? AND user_id=? AND m_num=? AND logout='0';",
                [req.body.bid, req.body.uid, req.body.mn],
                function (err, result) {
                    connection.release();
                    if (!err) {
                        console.log(result);
                        if (result.length > 0) {
                            var ID = result[0].id;
                            console.log("ID >> " + ID);
                            pool.getConnection(function (err, connection) {//update logout time
                                connection.query("UPDATE `" + dbname + "`.`bum_entry` SET `logout`='1',`logout_ts`=ADDTIME(NOW(),?) WHERE `id`=?;",
                                    [timezone, ID],
                                    function (err, result) {
                                        connection.release();
                                        if (!err) {
                                            console.log(result);
                                            res.end("BO#1");
                                        } else {
                                            res.end("BO#0");
                                            console.error(err);
                                            //throw err;
                                        }
                                    });
                            });
                        } else res.end("BO#0");

                    } else {
                        res.end("BO#0");
                        console.error(err);
                        //throw err;
                    }
                });
        });
    }
    else if (MODE == 'TM') { // Get Date/Time
        var DT = getMyDate() + '@' + getMyTM() + '%';
        res.end("TM#!" + DT);
    }
    else if (MODE == 'BT') { // get Branch Total Sales on that day
        pool.getConnection(function (err, connection) {
            //get branch name
            connection.query("SELECT c.branch_name, sum(a.weight*b.unit_price) as NET FROM `" + dbname + "`.product_entry a, `" + dbname + "`.products b, `" + dbname + "`.branch c where DATE(a.ts)=? and a.product_id=b.product_id and a.branch_id=c.branch_id and a.branch_id=?;",
                [getMyDate(), req.body.bid],
                function (err, result) {
                    connection.release();
                    if (!err) {
                        console.log(result);
                        if (result.length > 0) {
                            var total = numeral(parseFloat(result[0].NET)).format('0.00');
                            res.send("BT#" + total);
                        }
                        else
                            res.send("BT#0");

                    } else {
                        res.send("BT#0");
                        console.error(err);
                        errorLog(err);
                        // throw err;
                    }
                });
        });
    }
    else {
        res.end("Fuck Off");
    }
});
////////////////////////////////////////////////////////////////////

//////////////////////   ANGULAR JS   /////////////////////////////////////////
// MANAGE
app.post('/ajsgetdata', function (req, res) {
    console.log('===== ajsgetdata =====');
    console.log(req.body);
    //res.end("shit");
    var MODE = req.body.mode;
    logger.info(MODE)
    if (MODE == 'user') { //get user 
        pool.getConnection(function (err, connection) {
            connection.query("SELECT * FROM `" + dbname + "`.user order by user_id;",
                function (err, result) {
                    connection.release();
                    if (!err) {
                        //console.log(result);
                        var jarr = [];
                        if (result.length > 0) {
                            for (var x = 0; x < result.length; x++) {
                                var job = {
                                    "NAME": result[x].username,
                                    "ID": result[x].user_id,
                                    "NIC": result[x].nic,
                                    "ADD": result[x].address
                                }
                                jarr.push(job);
                            }

                        }
                        //console.log(jarr);
                        res.json(jarr);
                    } else {
                        res.end(err);
                        console.error(err);
                        // throw err;
                    }
                });
        });
    }
    else if (MODE == 'branch') { // get branch
        pool.getConnection(function (err, connection) {
            connection.query("SELECT * FROM `" + dbname + "`.branch  order by branch_id;",
                function (err, result) {
                    connection.release();
                    if (!err) {
                        //console.log(result);
                        var jarr = [];
                        if (result.length > 0) {
                            for (var x = 0; x < result.length; x++) {
                                var job = {
                                    "NAME": result[x].branch_name,
                                    "ID": result[x].branch_id,
                                    "ADD": result[x].address,
                                    "IWS": result[x].iswhole
                                }
                                jarr.push(job);
                            }

                        }
                        //console.log(jarr);
                        res.json(jarr);
                    } else {
                        res.end(err);
                        console.error(err);
                        // throw err;
                    }
                });
        });
    }
    else if (MODE == 'products') { // get products
        pool.getConnection(function (err, connection) {
            connection.query("SELECT * FROM `" + dbname + "`.products order by product_id;",
                function (err, result) {
                    connection.release();
                    if (!err) {
                        //console.log(result);
                        var jarr = [];
                        if (result.length > 0) {
                            for (var x = 0; x < result.length; x++) {
                                var job = {
                                    "ID": result[x].id,
                                    "NAME": result[x].product_name,
                                    "PID": result[x].product_id,
                                    "UP": result[x].unit_price,
                                    "UN": result[x].unit
                                }
                                jarr.push(job);
                            }
                        }
                        //console.log(jarr);
                        res.json(jarr);
                    } else {
                        res.end(err);
                        console.error(err);
                        // throw err;
                    }
                });
        });
    }
});

app.post('/adduser', function (req, res) {
    console.log('===== adduser =====');
    console.log(req.body);

    pool.getConnection(function (err, connection) {
        connection.query("INSERT INTO `" + dbname + "`.`user` (`user_id`, `username`, `nic`, `address`) VALUES (?, ?, ?, ?);",
            [req.body.id, req.body.name, req.body.nic, req.body.add],
            function (err, result) {
                connection.release();
                if (!err) {
                    res.json({ status: true });
                } else {
                    res.json({ status: false });
                    console.error(err);
                    //throw err;
                }
            });
    });
});

app.post('/addbranch', function (req, res) {
    console.log('===== addbranch =====');
    console.log(req.body);
    var iws = 0;
    if (req.body.iswhole == 'true') iws = 1;
    pool.getConnection(function (err, connection) {
        connection.query("INSERT INTO `" + dbname + "`.`branch` (`branch_name`, `branch_id`, `address`, `iswhole`) VALUES (?, ?, ?, ?);",
            [req.body.name, req.body.id, req.body.address, iws],
            function (err, result) {
                connection.release();
                if (!err) {
                    res.json({ status: true });
                } else {
                    res.json({ status: false });
                    console.error(err);
                    //throw err;
                }
            });
    });
});

app.post('/deluser', function (req, res) {
    console.log('===== deluser =====');
    console.log(req.body);

    pool.getConnection(function (err, connection) {
        connection.query("DELETE FROM `" + dbname + "`.`user` WHERE `user_id`=?;",
            [req.body.id],
            function (err, result) {
                connection.release();
                if (!err) {
                    res.json({ status: true });
                } else {
                    res.json({ status: false });
                    console.error(err);
                    // throw err;
                }
            });
    });
});

app.post('/delbranch', function (req, res) {
    console.log('===== delbranch =====');
    console.log(req.body);

    pool.getConnection(function (err, connection) {
        connection.query("DELETE FROM `" + dbname + "`.`branch` WHERE `branch_id`=?;",
            [req.body.id],
            function (err, result) {
                connection.release();
                if (!err) {
                    res.json({ status: true });
                } else {
                    res.json({ status: false });
                    console.error(err);
                    // throw err;
                }
            });
    });
});

app.post('/addproduct', function (req, res) {
    console.log('===== addproduct =====');
    console.log(req.body);
    pool.getConnection(function (err, connection) {
        connection.query("SELECT * FROM `" + dbname + "`.products order by product_id;",
            function (err, result) {
                connection.release();
                if (!err) {

                    var newArr = '';
                    //current db data
                    if (result.length > 0) {
                        for (var x = 0; x < result.length; x++) {
                            var newitem = '%' + result[x].product_name + '^' + result[x].unit_price + '`\r';
                            newArr += newitem;
                        }
                    }

                    //add new item data
                    newArr += '%' + req.body.name + '^' + req.body.uprice + '`\r';
                    newArr += '~';

                    var newSTR = "PL#" + newArr;
                    console.log("newSTR len : " + newSTR.length);
                    var data_length = newSTR.length;
                    //data_length = 1000;
                    if (data_length >= 1000) {
                        res.json({ status: false, msg: "Can't Add Any More Products" });
                    } else {

                        pool.getConnection(function (err, connection) {
                            connection.query("INSERT INTO `" + dbname + "`.`products` (`product_name`, `product_id`, `unit_price`, `unit`) VALUES (?, ?, ?, ?);",
                                [req.body.name, req.body.id, req.body.uprice, req.body.unit],
                                function (err, result) {
                                    connection.release();
                                    if (!err) {
                                        res.json({ status: true });
                                    } else {
                                        //throw err;
                                        res.json({ status: false, msg: "Database Error!" });
                                        console.log(err);
                                        //throw err;
                                    }
                                });
                        });
                    }

                } else {
                    res.json({ status: false, msg: "Database Error!" });
                    console.error(err);
                }
            });
    });

});

app.post('/delproduct', function (req, res) {
    console.log('===== delproduct =====');
    console.log(req.body);

    pool.getConnection(function (err, connection) {
        connection.query("DELETE FROM `" + dbname + "`.`products` WHERE `id`=?;",
            [req.body.id],
            function (err, result) {
                connection.release();
                if (!err) {
                    res.json({ status: true });
                } else {
                    res.json({ status: false });
                    console.error(err);
                    // throw err;
                }
            });
    });
});

app.post('/saveeditproduct', function (req, res) {
    console.log('===== saveeditproduct =====');
    console.log(req.body);
    //res.json({ status: true });
    pool.getConnection(function (err, connection) {
        connection.query("UPDATE `" + dbname + "`.`products` SET `product_name`=?, `product_id`=?, `unit_price`=?, `unit`=? WHERE `id`=?;",
            [req.body.name, req.body.pid, req.body.uprice, req.body.unit, req.body.id],
            function (err, result) {
                connection.release();
                if (!err) {
                    res.json({ status: true });
                } else {
                    //throw err;
                    res.json({ status: false });
                    console.log(err);
                    //throw err;
                }
            });
    });
});

// DASHBOARD
app.post('/getbranch', function (req, res) {
    console.log('POST ===== /getbranch =====');

    pool.getConnection(function (err, connection) {
        connection.query("SELECT distinct branch_id FROM `" + dbname + "`.bum_entry where DATE(ts)=?;",
            [getMyDate()],
            function (err, Qresult_1) {//active branches
                connection.release();
                if (!err) {
                    pool.getConnection(function (err, connection) {
                        connection.query("SELECT branch_id,branch_name FROM `" + dbname + "`.branch;",
                            function (err, Qresult_2) {//all branches
                                connection.release();
                                if (!err) {
                                    var jarray = [];
                                    if (Qresult_2.length > 0) {
                                        for (var k = 0; k < Qresult_2.length; k++) {
                                            var CLS = "btn-default";
                                            var NUM = Qresult_2[k].branch_id;
                                            var NM = Qresult_2[k].branch_name;
                                            if (Qresult_1.length > 0) {
                                                for (var x = 0; x < Qresult_1.length; x++) {
                                                    //fdata += 'DT('+Qresult_1[k].x+','+Qresult_1[k].y+','+ Qresult_1[x].tabel+',0);\n';
                                                    if (NUM == Qresult_1[x].branch_id) {
                                                        CLS = "btn-danger";
                                                    }
                                                }
                                            }

                                            var item = {
                                                "TNUM": NUM,
                                                "STAT": CLS,
                                                "NM": NM
                                            }
                                            jarray.push(item);
                                        }
                                    }
                                    //console.log(jarray);
                                    res.json(jarray);
                                } else {
                                    res.json({ status: false });
                                    console.error(err);
                                    // throw err;
                                }
                            });
                    });
                } else {
                    res.json({ status: false });
                    console.error(err);
                    // throw err;
                }
            });
    });
});

app.post('/getbranchstat', function (req, res) {
    console.log('===== getbranchstat =====');
    console.log(req.body);

    pool.getConnection(function (err, connection) {
        //get branch name
        connection.query("SELECT branch_name FROM `" + dbname + "`.branch where branch_id=?;",
            [req.body.bid],
            function (err, result) {
                connection.release();
                if (!err) {
                    var bname = '';
                    var bid = req.body.bid;
                    if (result.length > 0) bname = result[0].branch_name

                    //get user login data
                    pool.getConnection(function (err, connection) {
                        connection.query("SELECT a.username, b.user_id, date_format(b.ts, '%Y-%m-%d') as DT, date_format(b.ts, '%H:%i:%s') as TM, date_format(b.logout_ts, '%Y-%m-%d') as ODT, date_format(b.logout_ts, '%H:%i:%s') as OTM  FROM `" + dbname + "`.user a, `" + dbname + "`.bum_entry b where DATE(b.ts)=? and b.branch_id=? and a.user_id=b.user_id;",
                            [getMyDate(), req.body.bid],
                            function (err, result) {
                                connection.release();
                                if (!err) {
                                    var us_arr = [];
                                    if (result.length > 0) {
                                        for (var x = 0; x < result.length; x++) {
                                            var user = {
                                                "US": result[x].username,
                                                "UID": result[x].user_id,
                                                "LTM": result[x].DT + " " + result[x].TM,
                                                "OTM": result[x].ODT + " " + result[x].OTM
                                            }
                                            us_arr.push(user);
                                        }
                                    }
                                    //console.log(us_arr);

                                    //get machines
                                    pool.getConnection(function (err, connection) {
                                        connection.query("SELECT distinct m_num FROM `" + dbname + "`.bum_entry where DATE(ts)=? and branch_id=?;",
                                            [getMyDate(), req.body.bid],
                                            function (err, result) {
                                                connection.release();
                                                if (!err) {
                                                    var marr = [];
                                                    if (result.length > 0) {
                                                        for (var x = 0; x < result.length; x++) {
                                                            var user = {
                                                                "MNUM": result[x].m_num
                                                            }
                                                            marr.push(user);
                                                        }
                                                    }
                                                    //console.log(marr);

                                                    var jobj = {
                                                        "bname": bname,
                                                        "bid": bid,
                                                        "user": us_arr,
                                                        "mch": marr
                                                    }

                                                    console.log(jobj);

                                                    res.json(jobj);

                                                } else {
                                                    res.json({ status: false });
                                                    console.error(err);
                                                    // throw err;
                                                }
                                            });
                                    });

                                } else {
                                    res.json({ status: false });
                                    console.error(err);
                                    // throw err;
                                }
                            });
                    });
                } else {
                    res.json({ status: false });
                    console.error(err);
                    // throw err;
                }
            });
    });
});

// SALES
app.post('/branchsales', function (req, res) {
    // console.log(req.body);
    pool.getConnection(function (err, connection) {
        //get branch name
        connection.query("SELECT c.branch_name, sum(a.weight*b.unit_price) as NET FROM `" + dbname + "`.product_entry a, `" + dbname + "`.products b, `" + dbname + "`.branch c where DATE(a.ts) BETWEEN ? AND ? and a.product_id=b.product_id and a.branch_id=c.branch_id group by a.branch_id;",
            [req.body.fdate, req.body.tdate],
            function (err, result) {
                connection.release();
                if (!err) {
                    var plot_name = '';
                    if (req.body.fdate == req.body.tdate) plot_name = ' On ' + req.body.fdate;
                    else plot_name = ' from ' + req.body.fdate + ' to ' + req.body.tdate;

                    var jarr = [];
                    var jarr1 = [];
                    var total = 0;
                    if (result.length > 0) {
                        for (var x = 0; x < result.length; x++) {
                            var jobj = {
                                "BCH": result[x].branch_name,
                                "AMOUNT": numeral(parseFloat(result[x].NET)).format('0,0.00')
                            }
                            var jobj1 = {
                                "x": result[x].branch_name,
                                "a": numeral(parseFloat(result[x].NET)).format('0.00')
                            }
                            total += parseFloat(result[x].NET);
                            jarr.push(jobj);
                            jarr1.push(jobj1);
                        }

                    }
                    var jsend = {
                        "plot_name": plot_name,
                        "tbl": jarr,
                        "plot_data": jarr1,
                        "TOTAL": numeral(total).format('0.00')
                    }
                    // console.log(jsend);
                    res.json(jsend);

                } else {
                    res.json({ status: false });
                    console.error(err);
                    // throw err;
                }
            });
    });
});

app.post('/itemsales', function (req, res) {
    console.log('===== itemsales =====');
    console.log(req.body);

    pool.getConnection(function (err, connection) {
        //get branch name
        connection.query("SELECT b.product_name, b.unit, sum(a.weight) as WG, (sum(a.weight)*b.unit_price) as NET FROM `" + dbname + "`.product_entry a, `" + dbname + "`.products b where DATE(a.ts) BETWEEN ? AND ? and a.product_id=b.product_id group by b.product_id;",
            //[req.body.fdate, req.body.tdate],
            ['2017-08-11', '2017-08-31'],
            function (err, result) {
                connection.release();
                if (!err) {
                    var plot_name = '';
                    if (req.body.fdate == req.body.tdate) plot_name = 'On ' + req.body.fdate;
                    else plot_name = 'from ' + req.body.fdate + ' to ' + req.body.tdate;
                    var jarr = [];
                    var jarr1 = [];
                    var totalA = 0;
                    var totalW = 0;
                    if (result.length > 0) {
                        for (var x = 0; x < result.length; x++) {
                            var jobj = {
                                "ITEM": result[x].product_name,
                                "AMOUNT": numeral(parseFloat(result[x].NET)).format('0,0.00'),
                                "WG": numeral(parseFloat(result[x].WG)).format('0,0.000')
                            }
                            var jobj1 = {
                                "x": result[x].product_name,
                                "a": numeral(parseFloat(result[x].NET)).format('0.00'),
                                "b": numeral(parseFloat(result[x].WG)).format('0.000')
                            }
                            jarr.push(jobj);
                            jarr1.push(jobj1);
                            totalA += parseFloat(result[x].NET);
                            totalW += parseFloat(result[x].WG);
                        }

                    }
                    var jsend = {
                        "plot_name": plot_name,
                        "tbl": jarr,
                        "plot_data": jarr1,
                        "TOTALA": numeral(parseFloat(totalA)).format('0.00'),
                        "TOTALW": numeral(parseFloat(totalW)).format('0.000')
                    }
                    res.json(jsend);

                } else {
                    res.json({ status: false });
                    console.error(err);
                    //throw err;
                }
            });
    });
});

app.post('/usersales', function (req, res) {
    console.log('===== usersales =====');
    console.log(req.body);

    pool.getConnection(function (err, connection) {
        //get branch name
        connection.query("SELECT c.username, sum(a.weight*b.unit_price) as NET FROM `" + dbname + "`.product_entry a, `" + dbname + "`.products b, `" + dbname + "`.user c where DATE(a.ts) BETWEEN ? AND ? and a.product_id=b.product_id and a.user_id=c.user_id group by a.user_id;",
            [req.body.fdate, req.body.tdate],
            function (err, result) {
                connection.release();
                if (!err) {
                    var plot_name = '';
                    if (req.body.fdate == req.body.tdate) plot_name = 'On ' + req.body.fdate;
                    else plot_name = 'from ' + req.body.fdate + ' to ' + req.body.tdate;
                    var jarr = [];
                    var jarr1 = [];
                    var total = 0;
                    if (result.length > 0) {
                        for (var x = 0; x < result.length; x++) {
                            var jobj = {
                                "USER": result[x].username,
                                "AMOUNT": numeral(parseFloat(result[x].NET)).format('0,0.00')
                            }
                            var jobj1 = {
                                "x": result[x].username,
                                "a": numeral(parseFloat(result[x].NET)).format('0.00')
                            }
                            jarr.push(jobj);
                            jarr1.push(jobj1);
                            total += parseFloat(result[x].NET);
                        }

                    }
                    var jsend = {
                        "plot_name": plot_name,
                        "tbl": jarr,
                        "plot_data": jarr1,
                        "TOTAL": numeral(parseFloat(total)).format('0.00')
                    }
                    //console.log(jsend);
                    res.json(jsend);

                } else {
                    res.json({ status: false });
                    console.error(err);
                    //throw err;
                }
            });
    });
});

// BILL REVIEW
app.post('/getbranchbill', function (req, res) {
    console.log('===== getbranchbill =====');
    console.log(req.body);

    pool.getConnection(function (err, connection) {
        //get branch name
        connection.query("SELECT distinct bill_id FROM `" + dbname + "`.product_entry where DATE(ts) BETWEEN ? AND ? AND branch_id=?  order by bill_id;",
            [req.body.fdate, req.body.tdate, req.body.bid],
            function (err, result) {
                connection.release();
                if (!err) {
                    var jarr = [];
                    if (result.length > 0) {
                        //console.log(result);

                        for (var x = 0; x < result.length; x++) {
                            var jobj = {
                                "BLID": result[x].bill_id
                            }
                            jarr.push(jobj);
                        }
                    }
                    res.json(jarr);


                } else {
                    res.json({ status: false });
                    console.error(err);
                    // throw err;
                }
            });
    });
});

app.post('/getbilldata', function (req, res) {
    console.log('===== getbilldata =====');
    console.log(req.body);

    pool.getConnection(function (err, connection) {
        //get branch name
        connection.query("SELECT a.isedit, a.id, a.product_id, b.product_name, b.unit_price, a.weight, a.unit,(b.unit_price*a.weight) as AMT, a.machine_id, date_format(a.ts, '%Y-%m-%d') as DT, date_format(a.ts, '%H:%i:%s') as TM, c.username, a.user_id FROM `" + dbname + "`.product_entry a, `" + dbname + "`.products b, `" + dbname + "`.user c where a.branch_id=? AND a.bill_id=? and a.product_id=b.product_id  and a.user_id=c.user_id;",
            [req.body.bid, req.body.billid],
            function (err, result) {
                connection.release();
                if (!err) {
                    var jarr = [];
                    var jarrNew = [];
                    var user = '';
                    var machine_id = '';
                    var dt = '';
                    var UID = '';
                    var total = 0.0;
                    var totalEdit = 0.0;
                    if (result.length > 0) {
                        // console.log(result);
                        machine_id = result[0].machine_id;
                        user = result[0].username;
                        dt = result[0].DT;
                        UID = result[0].user_id;
                        for (var x = 0; x < result.length; x++) {

                            var jobj = {
                                "ID": result[x].id,
                                "A": result[x].product_name,
                                "B": result[x].weight,
                                "C": result[x].unit,
                                "D": result[x].unit_price,
                                "E": numeral(parseFloat(result[x].AMT)).format('0.00'),
                                "F": result[x].DT + " " + result[x].TM
                                // "PID": result[x].product_id
                            }
                            if (result[x].isedit == '1') {
                                jarrNew.push(jobj);
                            }

                            jarr.push(jobj);

                            total += parseFloat(result[x].AMT);

                        }
                    }
                    var JSEND = {
                        "MN": machine_id,
                        "US": user,
                        "BILL": req.body.billid,
                        "TBL": jarr,
                        "TBLNEW": jarrNew,
                        "TTL": numeral(parseFloat(total)).format('0.00'),
                        "DT": dt,
                        "UID": UID,
                        "BID": req.body.bid

                    }
                    res.json(JSEND);


                } else {
                    res.json({ status: false });
                    console.error(err);
                    // throw err;
                }
            });
    });
});

app.post('/delbillitem', function (req, res) {
    console.log('===== delbillitem =====');
    console.log(req.body);

    pool.getConnection(function (err, connection) {
        connection.query("DELETE FROM `" + dbname + "`.`product_entry` WHERE `id`=?;",
            [req.body.id],
            function (err, result) {
                connection.release();
                if (!err) {
                    res.json({ status: true });
                } else {
                    res.json({ status: false });
                    console.error(err);
                    // throw err;
                }
            });
    });
});

app.post('/getAddBillItemData', function (req, res) {
    console.log('===== getAddBillItemData =====');
    // console.log(req.body);

    pool.getConnection(function (err, connection) {
        connection.query("SELECT * FROM `" + dbname + "`.products order by product_id;",
            function (err, result) {
                connection.release();
                if (!err) {
                    // console.log(result);
                    var jarr = [];
                    if (result.length > 0) {
                        for (var x = 0; x < result.length; x++) {
                            var obj = {
                                "PID": result[x].product_id,
                                "PNM": result[x].product_name,
                                // "UP":result[x].unit_price,
                                "UN": result[x].unit
                            }
                            // console.log(obj);
                            jarr.push(obj);
                        }
                    }
                    // console.log(jarr);
                    var JSND = {
                        "A": jarr
                    }
                    res.json(JSND);
                } else {
                    res.json({ status: false });
                    console.error(err);
                    // throw err;
                }
            });
    });
});

app.post('/addbillitem', function (req, res) {
    console.log('===== addbillitem =====');
    console.log(req.body);

    pool.getConnection(function (err, connection) {
        connection.query("INSERT INTO `" + dbname + "`.`product_entry` (`product_id`, `weight`, `unit`, `ts`, `machine_id`, `bill_id`, `branch_id`, `user_id`, `isedit`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);",
            [req.body.pid, req.body.w, req.body.unit, req.body.date + ' 20:30:40', req.body.mn, req.body.bill, req.body.bid, req.body.uid, '1'],
            function (err, result) {
                connection.release();
                console.log(result);
                if (!err) {
                    res.json({ status: true });
                } else {
                    res.json({ status: false });
                    console.error(err);
                    // throw err;
                }
            });
    });
});

// ADMIN
app.post('/getadminuser', function (req, res) {
    console.log('===== getadminuser =====');
    console.log(req.body);
    //res.end("shit");
    var MODE = req.body.mode;
    if (MODE == 'user') { //get user 
        pool.getConnection(function (err, connection) {
            connection.query("SELECT * FROM `" + dbname + "`.portal_user where status=0;",
                function (err, result) {
                    connection.release();
                    if (!err) {
                        //console.log(result);
                        var jarr = [];
                        if (result.length > 0) {
                            for (var x = 0; x < result.length; x++) {
                                var job = {
                                    "NAME": result[x].db_username,
                                    "ID": result[x].id

                                }
                                jarr.push(job);
                            }

                        }
                        //console.log(jarr);
                        res.json(jarr);
                    } else {
                        res.end(err);
                        console.error(err);
                        // throw err;
                    }
                });
        });
    }
});

app.post('/deladminuser', function (req, res) {
    console.log('===== deladminuser =====');
    console.log(req.body);

    pool.getConnection(function (err, connection) {
        connection.query("SELECT * FROM `" + dbname + "`.`portal_user`;",
            [req.body.id],
            function (err, result) {
                connection.release();
                if (!err) {
                    console.log('table len : ', result.length);
                    if (result.length > 3) {//cant delete the last user
                        pool.getConnection(function (err, connection) {
                            connection.query("DELETE FROM `" + dbname + "`.`portal_user` WHERE `id`=?;",
                                [req.body.id],
                                function (err, result) {
                                    connection.release();
                                    if (!err) {
                                        res.json({ status: true });
                                    } else {
                                        res.json({ status: false });
                                        console.error(err);
                                        // throw err;
                                    }
                                });
                        });
                    } else {
                        res.json({ status: false });
                    }
                } else {
                    res.json({ status: false });
                    console.error(err);
                    // throw err;
                }
            });
    });


});

app.post('/addadminuser', function (req, res) {
    console.log('===== addadminuser =====');
    // console.log(req.body);
    // console.log(aes.encText(req.body.pw,key));
    pool.getConnection(function (err, connection) {
        connection.query("INSERT INTO `" + dbname + "`.`portal_user` (`db_username`, `db_password`) VALUES (?, ?);",
            [req.body.us, aes.encText(req.body.pw, key)],
            function (err, result) {
                connection.release();
                if (!err) {
                    res.json({ status: true });
                } else {
                    res.json({ status: false });
                    console.error(err);
                    //throw err;
                }
            });
    });
});

// TEST
app.get('/dlen', function (req, res) {
    console.log('===== dlen =====');
    pool.getConnection(function (err, connection) {
        connection.query("SELECT * FROM `" + dbname + "`.products order by product_id;",
            function (err, result) {
                connection.release();
                if (!err) {

                    var newArr = '';
                    //current db data
                    if (result.length > 0) {
                        for (var x = 0; x < result.length; x++) {
                            var newitem = '%' + result[x].product_name + '^' + result[x].unit_price + '`\r';
                            newArr += newitem;
                        }
                    }

                    //add new item data
                    newArr += '%' + req.body.name + '^' + req.body.uprice + '`\r';
                    newArr += '~';

                    var newSTR = "PL#" + newArr;
                    console.log("newSTR len : " + newSTR.length);
                    var data_length = newSTR.length;
                    res.json({ dlen: data_length });


                } else {
                    res.json({ status: false, msg: "Database Error!" });
                    console.error(err);
                }
            });
    });
});

app.get('/memusage', function (req, res) {
    const { rss, heapTotal, heapUsed, external } = process.memoryUsage();
    // console.log('rss', numeral(rss).format('0.0 ib'),
    //             'heapTotal', numeral(heapTotal).format('0.0 ib'),
    //             'heapUsed', numeral(heapUsed).format('0.0 ib'),
    //             'external', numeral(external).format('0.0 ib')
    //         )
    var jsend = {
        "time": getMyTM(),
        "data": [parseInt(numeral(rss).format('0.0 ib')), parseInt(numeral(heapTotal).format('0.0 ib')), parseInt(numeral(heapUsed).format('0.0 ib'))]
        // "external": numeral(external).format('0.0 ib')
    }
    res.json(jsend);
});
////////////////////////////////////////////////////////////////////

// ---------- Uncaught Exceptions ----------
process.on('uncaughtException', function (err) {
    logger.error(err);
    process.exit(1);
});

// ---------- Server ----------
var server = app.listen(port, function () {
    //var host = ip.address();
    var host = '127.0.0.1';
    var PORT = server.address().port

    console.log('Example app listening at http://' + host + ':' + PORT)
});

//---------- Email NodeJS ----------
var nodeMailer = require('nodemailer')
let transporter = nodeMailer.createTransport({
    host: 'smtp.gmail.com',
    port: 465,
    secure: true,
    auth: {
        user: process.env.EMAIL,
        pass: process.env.EMAIL_PASSWORD
    }
});
///NOTE: use email-template package to inject data to the webpage
var htmlstream = fs.createReadStream(__dirname + '/Email/email.html');
let mailOptions = {
    headers: {
        'priority': 'high'
    },
    from: '"[DEV] Bellpepper WebPortal - Ceymoss" <dev@ceymoss.com>', // sender address - change to "bellpepper@ceymoss.com"
    to: 'basameera.sjc@gmail.com', // list of receivers
    subject: 'Password Reset - Bellpepper WebPortal [Restaurant Name]', // Subject line
    text: 'Password Reset - Bellpepper WebPortal [Ceymoss]', // plain text body
    html: htmlstream // html body
};

// transporter.sendMail(mailOptions, (error, info) => {
//     if (error) {
//         return console.log(error);
//     }
//     console.log('Message %s sent: %s', info.messageId, info.response);
//     res.render('index');
// });

// ---------- Memory Usage ----------
/*
setInterval(() => {
    const {rss, heapTotal, heapUsed, external} = process.memoryUsage();
    console.log('rss', numeral(rss).format('0.0 ib'),
                'heapTotal', numeral(heapTotal).format('0.0 ib'),
                'heapUsed', numeral(heapUsed).format('0.0 ib'),
                'external', numeral(external).format('0.0 ib')
            )
}, 10000)
*/